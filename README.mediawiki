== Session Validator ==
So that there is no confusion, it is important to note that the only file you
need from this project, for it to work in your project, is the
session-validator.js and jQuery.  You can obtain this file by simply grabbing
it manually or installing it through npm.  Read this document once, and you'll
be on your way.

The goal of this mini project was to create a simple to use session validator
which allows for updating a displayed session timeout for the user.  I opted for
a callback as opposed to updating the DOM from within the library, as it
provides the ultimate flexibility.  The callback receives a simple json result
from the server...

 { sessionValid: true, sessionTime: 600 }

The session time (time before expiry) is in seconds.  The session ajax call
is only done every 10 seconds, so we recommend using minute based granularity.
When it's less than 60 seconds, tell the user that the session will expire in
less than a minute.

== Web Service ==
Your application must have a web service which does not manipulate the session,
but only states whether the session is valid, and how much time there is left.
As indicated earlier, the data returned should be JSON in the following format.

 { sessionValid: true, sessionTime: 600 }


== Usage ==
=== HTML ===
You are required to include jQuery and the session validator.  Examples below...

  <script type="text/javascript" src="/components/jquery/dist/jquery.min.js"></script>
  <script type="text/javascript" src="/js/session-validator.js"></script>

=== Javascript ===
It's as simple as instantiating a new instance of the session validator, with
the session web service url, the redirect url when the session becomes invalid,
and your callback function.  A working example for the test web service
that this project provides is below, and can also be found in the
validator-example.js ...

 let sessionValidator = new SessionValidator(
   'http://localhost:3000/check-session', /* session web service */
   'http://localhost:3000/', /* redirect url */
   function (result)
   {
     jQuery('#session-time').text(Math.ceil(result.sessionTime / 60) + '-' +
       result.sessionTime);
   });
 sessionValidator.monitor();

In the event that the session becomes invalid, the browser will be redirected
to the redirect url, unless the redirect url is null.

== Playing ==
You can play with the services to see how they work.

 git clone https://github.com/TrentonAdams/session-validator.git
 cd session-validator
 npm install
 bower install
 grunt

Now visit http://localhost:3000.  This main page creates a new session with a
10 minute timer.  If you'd like to see the web service results, go to...

 # visit http://localhost:3000/check-session in your browser or
 curl -H 'Accept: application/json' http://localhost:3000/check-session

If you'd like to expire the session (in another tab) to see what happens on the
main page, you can go to...

 http://localhost:3000/check-session?expire=true

== Documentation ==
You can generate some quick docs to get an overview of the SessionValidator
class.

 grunt jsdoc
 google-chrome doc/SessionValidator.html
